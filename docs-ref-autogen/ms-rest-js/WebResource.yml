### YamlMime:UniversalReference
items:
  - uid: ms-rest-js.WebResource
    name: WebResource
    fullName: WebResource
    children:
      - ms-rest-js.WebResource.abortSignal
      - ms-rest-js.WebResource.body
      - ms-rest-js.WebResource.clone
      - ms-rest-js.WebResource.formData
      - ms-rest-js.WebResource.headers
      - ms-rest-js.WebResource.method
      - ms-rest-js.WebResource.onDownloadProgress
      - ms-rest-js.WebResource.onUploadProgress
      - ms-rest-js.WebResource.operationResponseGetter
      - ms-rest-js.WebResource.operationSpec
      - ms-rest-js.WebResource.prepare
      - ms-rest-js.WebResource.query
      - ms-rest-js.WebResource.shouldDeserialize
      - ms-rest-js.WebResource.streamResponseBody
      - ms-rest-js.WebResource.timeout
      - ms-rest-js.WebResource.url
      - ms-rest-js.WebResource.validateRequestProperties
      - ms-rest-js.WebResource.constructor
      - ms-rest-js.WebResource.withCredentials
    langs:
      - typeScript
    type: class
    summary: >
      Creates a new WebResource object.

      This class provides an abstraction over a REST call by being library /
      implementation agnostic and wrapping the necessary

      properties to initiate a request.
    package: ms-rest-js
  - uid: ms-rest-js.WebResource.abortSignal
    name: abortSignal
    fullName: abortSignal
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    optional: true
    syntax:
      content: 'abortSignal?: AbortSignalLike'
      return:
        type:
          - ms-rest-js.AbortSignalLike
    package: ms-rest-js
  - uid: ms-rest-js.WebResource.body
    name: body
    fullName: body
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    optional: true
    syntax:
      content: 'body?: any'
      return:
        type:
          - any
    package: ms-rest-js
  - uid: ms-rest-js.WebResource.clone
    name: clone()
    children: []
    type: method
    langs:
      - typeScript
    summary: Clone this WebResource HTTP request object.
    syntax:
      content: function clone()
      parameters: []
      return:
        type:
          - ms-rest-js.WebResource
    package: ms-rest-js
  - uid: ms-rest-js.WebResource.formData
    name: formData
    fullName: formData
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    optional: true
    syntax:
      content: 'formData?: any'
      return:
        type:
          - any
    package: ms-rest-js
  - uid: ms-rest-js.WebResource.headers
    name: headers
    fullName: headers
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'headers: HttpHeaders'
      return:
        type:
          - ms-rest-js.HttpHeaders
    package: ms-rest-js
  - uid: ms-rest-js.WebResource.method
    name: method
    fullName: method
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'method: HttpMethods'
      return:
        type:
          - ms-rest-js.HttpMethods
    package: ms-rest-js
  - uid: ms-rest-js.WebResource.onDownloadProgress
    name: onDownloadProgress
    fullName: onDownloadProgress
    children: []
    langs:
      - typeScript
    type: property
    summary: Callback which fires upon download progress.
    optional: true
    syntax:
      content: 'onDownloadProgress?: (progress: TransferProgressEvent) => void'
      return:
        type:
          - '(progress: TransferProgressEvent) => void'
    package: ms-rest-js
  - uid: ms-rest-js.WebResource.onUploadProgress
    name: onUploadProgress
    fullName: onUploadProgress
    children: []
    langs:
      - typeScript
    type: property
    summary: Callback which fires upon upload progress.
    optional: true
    syntax:
      content: 'onUploadProgress?: (progress: TransferProgressEvent) => void'
      return:
        type:
          - '(progress: TransferProgressEvent) => void'
    package: ms-rest-js
  - uid: ms-rest-js.WebResource.operationResponseGetter
    name: operationResponseGetter
    fullName: operationResponseGetter
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      A function that returns the proper OperationResponse for the given
      OperationSpec and

      HttpOperationResponse combination. If this is undefined, then a simple
      status code lookup will

      be used.
    optional: true
    syntax:
      content: >-
        operationResponseGetter?: (operationSpec: OperationSpec, response:
        HttpOperationResponse) => OperationResponse
      return:
        type:
          - >-
            (operationSpec: OperationSpec, response: HttpOperationResponse) =>
            OperationResponse
    package: ms-rest-js
  - uid: ms-rest-js.WebResource.operationSpec
    name: operationSpec
    fullName: operationSpec
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    optional: true
    syntax:
      content: 'operationSpec?: OperationSpec'
      return:
        type:
          - ms-rest-js.OperationSpec
    package: ms-rest-js
  - uid: ms-rest-js.WebResource.prepare
    name: prepare(RequestPrepareOptions)
    children: []
    type: method
    langs:
      - typeScript
    summary: Prepares the request.
    syntax:
      content: 'function prepare(options: RequestPrepareOptions)'
      parameters:
        - id: options
          type:
            - ms-rest-js.RequestPrepareOptions
          description: Options to provide for preparing the request.
      return:
        type:
          - ms-rest-js.WebResource
    package: ms-rest-js
  - uid: ms-rest-js.WebResource.query
    name: query
    fullName: query
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    optional: true
    syntax:
      content: 'query?: [key: string]: any'
      return:
        type:
          - '[key: string]: any'
    package: ms-rest-js
  - uid: ms-rest-js.WebResource.shouldDeserialize
    name: shouldDeserialize
    fullName: shouldDeserialize
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Whether or not the HttpOperationResponse should be deserialized. If this
      is undefined, then the

      HttpOperationResponse should be deserialized.
    optional: true
    syntax:
      content: >-
        shouldDeserialize?: boolean | (response: HttpOperationResponse) =>
        boolean
      return:
        type:
          - 'boolean | (response: HttpOperationResponse) => boolean'
    package: ms-rest-js
  - uid: ms-rest-js.WebResource.streamResponseBody
    name: streamResponseBody
    fullName: streamResponseBody
    children: []
    langs:
      - typeScript
    type: property
    summary: >-
      Whether or not the body of the HttpOperationResponse should be treated as
      a stream.
    optional: true
    syntax:
      content: 'streamResponseBody?: boolean'
      return:
        type:
          - boolean
    package: ms-rest-js
  - uid: ms-rest-js.WebResource.timeout
    name: timeout
    fullName: timeout
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'timeout: number'
      return:
        type:
          - number
    package: ms-rest-js
  - uid: ms-rest-js.WebResource.url
    name: url
    fullName: url
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'url: string'
      return:
        type:
          - string
    package: ms-rest-js
  - uid: ms-rest-js.WebResource.validateRequestProperties
    name: validateRequestProperties()
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Validates that the required properties such as method, url,
      headers["Content-Type"],

      headers["accept-language"] are defined. It will throw an error if one of
      the above

      mentioned properties are not defined.
    syntax:
      content: function validateRequestProperties()
      parameters: []
    package: ms-rest-js
  - uid: ms-rest-js.WebResource.constructor
    name: >-
      WebResource(string, HttpMethods, any, [key: string]: any, [key: string]:
      any | HttpHeaders, boolean, boolean, AbortSignalLike, number, (progress:
      TransferProgressEvent) => void, (progress: TransferProgressEvent) => void)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        new WebResource(url?: string, method?: HttpMethods, body?: any, query?:
        [key: string]: any, headers?: [key: string]: any | HttpHeaders,
        streamResponseBody?: boolean, withCredentials?: boolean, abortSignal?:
        AbortSignalLike, timeout?: number, onUploadProgress?: (progress:
        TransferProgressEvent) => void, onDownloadProgress?: (progress:
        TransferProgressEvent) => void)
      parameters:
        - id: url
          type:
            - string
          description: ''
          optional: true
        - id: method
          type:
            - ms-rest-js.HttpMethods
          description: ''
          optional: true
        - id: body
          type:
            - any
          description: ''
          optional: true
        - id: query
          type:
            - '[key: string]: any'
          description: ''
          optional: true
        - id: headers
          type:
            - '[key: string]: any | ms-rest-js.HttpHeaders'
          description: ''
          optional: true
        - id: streamResponseBody
          type:
            - boolean
          description: ''
          optional: true
        - id: withCredentials
          type:
            - boolean
          description: ''
          optional: true
        - id: abortSignal
          type:
            - ms-rest-js.AbortSignalLike
          description: ''
          optional: true
        - id: timeout
          type:
            - number
          description: ''
          optional: true
        - id: onUploadProgress
          type:
            - '(progress: TransferProgressEvent) => void'
          description: ''
          optional: true
        - id: onDownloadProgress
          type:
            - '(progress: TransferProgressEvent) => void'
          description: ''
          optional: true
    package: ms-rest-js
  - uid: ms-rest-js.WebResource.withCredentials
    name: withCredentials
    fullName: withCredentials
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'withCredentials: boolean'
      return:
        type:
          - boolean
    package: ms-rest-js
references:
  - uid: ms-rest-js.HttpMethods
    name: HttpMethods
    spec.typeScript:
      - name: HttpMethods
        fullName: HttpMethods
        uid: ms-rest-js.HttpMethods
  - uid: '[key: string]: any | ms-rest-js.HttpHeaders'
    name: HttpHeaders
    spec.typeScript:
      - name: '[key: string]: any | '
        fullName: '[key: string]: any | '
      - name: HttpHeaders
        fullName: HttpHeaders
        uid: ms-rest-js.HttpHeaders
  - uid: ms-rest-js.AbortSignalLike
    name: AbortSignalLike
    spec.typeScript:
      - name: AbortSignalLike
        fullName: AbortSignalLike
        uid: ms-rest-js.AbortSignalLike
  - uid: ms-rest-js.HttpHeaders
    name: HttpHeaders
    spec.typeScript:
      - name: HttpHeaders
        fullName: HttpHeaders
        uid: ms-rest-js.HttpHeaders
  - uid: ms-rest-js.OperationSpec
    name: OperationSpec
    spec.typeScript:
      - name: OperationSpec
        fullName: OperationSpec
        uid: ms-rest-js.OperationSpec
  - uid: ms-rest-js.WebResource
    name: WebResource
    spec.typeScript:
      - name: WebResource
        fullName: WebResource
        uid: ms-rest-js.WebResource
  - uid: ms-rest-js.RequestPrepareOptions
    name: RequestPrepareOptions
    spec.typeScript:
      - name: RequestPrepareOptions
        fullName: RequestPrepareOptions
        uid: ms-rest-js.RequestPrepareOptions
